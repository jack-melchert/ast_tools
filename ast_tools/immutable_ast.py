# file generated by ast_tools/_immutable_ast.py on 2019-08-30 12:22:11.404048
# for python 3.7.3 (default, Apr  3 2019, 05:39:12)

import ast
import sys
import warnings

from ._immutable_ast import *

if sys.version_info[:2] != (3, 7):
    warnings.warn(f"{__file__} generated for (3, 7)"
                  f"does not match system version {sys.version_info[:2]}")

__ALL__ = ['AST', 'alias', 'arg', 'arguments', 'boolop', 'And', 'Or', 'cmpop', 'Eq', 'Gt', 'GtE', 'In', 'Is', 'IsNot', 'Lt', 'LtE', 'NotEq', 'NotIn', 'comprehension', 'excepthandler', 'ExceptHandler', 'expr', 'Attribute', 'Await', 'BinOp', 'BoolOp', 'Bytes', 'Call', 'Compare', 'Constant', 'Dict', 'DictComp', 'Ellipsis', 'FormattedValue', 'GeneratorExp', 'IfExp', 'JoinedStr', 'Lambda', 'List', 'ListComp', 'Name', 'NameConstant', 'Num', 'Set', 'SetComp', 'Starred', 'Str', 'Subscript', 'Tuple', 'UnaryOp', 'Yield', 'YieldFrom', 'expr_context', 'AugLoad', 'AugStore', 'Del', 'Load', 'Param', 'Store', 'keyword', 'mod', 'Expression', 'Interactive', 'Module', 'Suite', 'operator', 'Add', 'BitAnd', 'BitOr', 'BitXor', 'Div', 'FloorDiv', 'LShift', 'MatMult', 'Mod', 'Mult', 'Pow', 'RShift', 'Sub', 'slice', 'ExtSlice', 'Index', 'Slice', 'stmt', 'AnnAssign', 'Assert', 'Assign', 'AsyncFor', 'AsyncFunctionDef', 'AsyncWith', 'AugAssign', 'Break', 'ClassDef', 'Continue', 'Delete', 'Expr', 'For', 'FunctionDef', 'Global', 'If', 'Import', 'ImportFrom', 'Nonlocal', 'Pass', 'Raise', 'Return', 'Try', 'While', 'With', 'unaryop', 'Invert', 'Not', 'UAdd', 'USub', 'withitem']

class AST(mutable=ast.AST, metaclass=ImmutableMeta):
    _fields=()
    def __init__(self):
        pass


class alias(AST, mutable=ast.alias):
    _fields=('name', 'asname')
    def __init__(self, name, asname):
        self.name = name
        self.asname = asname


class arg(AST, mutable=ast.arg):
    _fields=('arg', 'annotation')
    def __init__(self, arg, annotation):
        self.arg = arg
        self.annotation = annotation


class arguments(AST, mutable=ast.arguments):
    _fields=('args', 'vararg', 'kwonlyargs', 'kw_defaults', 'kwarg', 'defaults')
    def __init__(self, args, vararg, kwonlyargs, kw_defaults, kwarg, defaults):
        self.args = args
        self.vararg = vararg
        self.kwonlyargs = kwonlyargs
        self.kw_defaults = kw_defaults
        self.kwarg = kwarg
        self.defaults = defaults


class boolop(AST, mutable=ast.boolop):
    _fields=()
    def __init__(self):
        pass


class And(boolop, mutable=ast.And):
    _fields=()
    def __init__(self):
        pass


class Or(boolop, mutable=ast.Or):
    _fields=()
    def __init__(self):
        pass


class cmpop(AST, mutable=ast.cmpop):
    _fields=()
    def __init__(self):
        pass


class Eq(cmpop, mutable=ast.Eq):
    _fields=()
    def __init__(self):
        pass


class Gt(cmpop, mutable=ast.Gt):
    _fields=()
    def __init__(self):
        pass


class GtE(cmpop, mutable=ast.GtE):
    _fields=()
    def __init__(self):
        pass


class In(cmpop, mutable=ast.In):
    _fields=()
    def __init__(self):
        pass


class Is(cmpop, mutable=ast.Is):
    _fields=()
    def __init__(self):
        pass


class IsNot(cmpop, mutable=ast.IsNot):
    _fields=()
    def __init__(self):
        pass


class Lt(cmpop, mutable=ast.Lt):
    _fields=()
    def __init__(self):
        pass


class LtE(cmpop, mutable=ast.LtE):
    _fields=()
    def __init__(self):
        pass


class NotEq(cmpop, mutable=ast.NotEq):
    _fields=()
    def __init__(self):
        pass


class NotIn(cmpop, mutable=ast.NotIn):
    _fields=()
    def __init__(self):
        pass


class comprehension(AST, mutable=ast.comprehension):
    _fields=('target', 'iter', 'ifs', 'is_async')
    def __init__(self, target, iter, ifs, is_async):
        self.target = target
        self.iter = iter
        self.ifs = ifs
        self.is_async = is_async


class excepthandler(AST, mutable=ast.excepthandler):
    _fields=()
    def __init__(self):
        pass


class ExceptHandler(excepthandler, mutable=ast.ExceptHandler):
    _fields=('type', 'name', 'body')
    def __init__(self, type, name, body):
        self.type = type
        self.name = name
        self.body = body


class expr(AST, mutable=ast.expr):
    _fields=()
    def __init__(self):
        pass


class Attribute(expr, mutable=ast.Attribute):
    _fields=('value', 'attr', 'ctx')
    def __init__(self, value, attr, ctx):
        self.value = value
        self.attr = attr
        self.ctx = ctx


class Await(expr, mutable=ast.Await):
    _fields=('value',)
    def __init__(self, value):
        self.value = value


class BinOp(expr, mutable=ast.BinOp):
    _fields=('left', 'op', 'right')
    def __init__(self, left, op, right):
        self.left = left
        self.op = op
        self.right = right


class BoolOp(expr, mutable=ast.BoolOp):
    _fields=('op', 'values')
    def __init__(self, op, values):
        self.op = op
        self.values = values


class Bytes(expr, mutable=ast.Bytes):
    _fields=('s',)
    def __init__(self, s):
        self.s = s


class Call(expr, mutable=ast.Call):
    _fields=('func', 'args', 'keywords')
    def __init__(self, func, args, keywords):
        self.func = func
        self.args = args
        self.keywords = keywords


class Compare(expr, mutable=ast.Compare):
    _fields=('left', 'ops', 'comparators')
    def __init__(self, left, ops, comparators):
        self.left = left
        self.ops = ops
        self.comparators = comparators


class Constant(expr, mutable=ast.Constant):
    _fields=('value',)
    def __init__(self, value):
        self.value = value


class Dict(expr, mutable=ast.Dict):
    _fields=('keys', 'values')
    def __init__(self, keys, values):
        self.keys = keys
        self.values = values


class DictComp(expr, mutable=ast.DictComp):
    _fields=('key', 'value', 'generators')
    def __init__(self, key, value, generators):
        self.key = key
        self.value = value
        self.generators = generators


class Ellipsis(expr, mutable=ast.Ellipsis):
    _fields=()
    def __init__(self):
        pass


class FormattedValue(expr, mutable=ast.FormattedValue):
    _fields=('value', 'conversion', 'format_spec')
    def __init__(self, value, conversion, format_spec):
        self.value = value
        self.conversion = conversion
        self.format_spec = format_spec


class GeneratorExp(expr, mutable=ast.GeneratorExp):
    _fields=('elt', 'generators')
    def __init__(self, elt, generators):
        self.elt = elt
        self.generators = generators


class IfExp(expr, mutable=ast.IfExp):
    _fields=('test', 'body', 'orelse')
    def __init__(self, test, body, orelse):
        self.test = test
        self.body = body
        self.orelse = orelse


class JoinedStr(expr, mutable=ast.JoinedStr):
    _fields=('values',)
    def __init__(self, values):
        self.values = values


class Lambda(expr, mutable=ast.Lambda):
    _fields=('args', 'body')
    def __init__(self, args, body):
        self.args = args
        self.body = body


class List(expr, mutable=ast.List):
    _fields=('elts', 'ctx')
    def __init__(self, elts, ctx):
        self.elts = elts
        self.ctx = ctx


class ListComp(expr, mutable=ast.ListComp):
    _fields=('elt', 'generators')
    def __init__(self, elt, generators):
        self.elt = elt
        self.generators = generators


class Name(expr, mutable=ast.Name):
    _fields=('id', 'ctx')
    def __init__(self, id, ctx):
        self.id = id
        self.ctx = ctx


class NameConstant(expr, mutable=ast.NameConstant):
    _fields=('value',)
    def __init__(self, value):
        self.value = value


class Num(expr, mutable=ast.Num):
    _fields=('n',)
    def __init__(self, n):
        self.n = n


class Set(expr, mutable=ast.Set):
    _fields=('elts',)
    def __init__(self, elts):
        self.elts = elts


class SetComp(expr, mutable=ast.SetComp):
    _fields=('elt', 'generators')
    def __init__(self, elt, generators):
        self.elt = elt
        self.generators = generators


class Starred(expr, mutable=ast.Starred):
    _fields=('value', 'ctx')
    def __init__(self, value, ctx):
        self.value = value
        self.ctx = ctx


class Str(expr, mutable=ast.Str):
    _fields=('s',)
    def __init__(self, s):
        self.s = s


class Subscript(expr, mutable=ast.Subscript):
    _fields=('value', 'slice', 'ctx')
    def __init__(self, value, slice, ctx):
        self.value = value
        self.slice = slice
        self.ctx = ctx


class Tuple(expr, mutable=ast.Tuple):
    _fields=('elts', 'ctx')
    def __init__(self, elts, ctx):
        self.elts = elts
        self.ctx = ctx


class UnaryOp(expr, mutable=ast.UnaryOp):
    _fields=('op', 'operand')
    def __init__(self, op, operand):
        self.op = op
        self.operand = operand


class Yield(expr, mutable=ast.Yield):
    _fields=('value',)
    def __init__(self, value):
        self.value = value


class YieldFrom(expr, mutable=ast.YieldFrom):
    _fields=('value',)
    def __init__(self, value):
        self.value = value


class expr_context(AST, mutable=ast.expr_context):
    _fields=()
    def __init__(self):
        pass


class AugLoad(expr_context, mutable=ast.AugLoad):
    _fields=()
    def __init__(self):
        pass


class AugStore(expr_context, mutable=ast.AugStore):
    _fields=()
    def __init__(self):
        pass


class Del(expr_context, mutable=ast.Del):
    _fields=()
    def __init__(self):
        pass


class Load(expr_context, mutable=ast.Load):
    _fields=()
    def __init__(self):
        pass


class Param(expr_context, mutable=ast.Param):
    _fields=()
    def __init__(self):
        pass


class Store(expr_context, mutable=ast.Store):
    _fields=()
    def __init__(self):
        pass


class keyword(AST, mutable=ast.keyword):
    _fields=('arg', 'value')
    def __init__(self, arg, value):
        self.arg = arg
        self.value = value


class mod(AST, mutable=ast.mod):
    _fields=()
    def __init__(self):
        pass


class Expression(mod, mutable=ast.Expression):
    _fields=('body',)
    def __init__(self, body):
        self.body = body


class Interactive(mod, mutable=ast.Interactive):
    _fields=('body',)
    def __init__(self, body):
        self.body = body


class Module(mod, mutable=ast.Module):
    _fields=('body',)
    def __init__(self, body):
        self.body = body


class Suite(mod, mutable=ast.Suite):
    _fields=('body',)
    def __init__(self, body):
        self.body = body


class operator(AST, mutable=ast.operator):
    _fields=()
    def __init__(self):
        pass


class Add(operator, mutable=ast.Add):
    _fields=()
    def __init__(self):
        pass


class BitAnd(operator, mutable=ast.BitAnd):
    _fields=()
    def __init__(self):
        pass


class BitOr(operator, mutable=ast.BitOr):
    _fields=()
    def __init__(self):
        pass


class BitXor(operator, mutable=ast.BitXor):
    _fields=()
    def __init__(self):
        pass


class Div(operator, mutable=ast.Div):
    _fields=()
    def __init__(self):
        pass


class FloorDiv(operator, mutable=ast.FloorDiv):
    _fields=()
    def __init__(self):
        pass


class LShift(operator, mutable=ast.LShift):
    _fields=()
    def __init__(self):
        pass


class MatMult(operator, mutable=ast.MatMult):
    _fields=()
    def __init__(self):
        pass


class Mod(operator, mutable=ast.Mod):
    _fields=()
    def __init__(self):
        pass


class Mult(operator, mutable=ast.Mult):
    _fields=()
    def __init__(self):
        pass


class Pow(operator, mutable=ast.Pow):
    _fields=()
    def __init__(self):
        pass


class RShift(operator, mutable=ast.RShift):
    _fields=()
    def __init__(self):
        pass


class Sub(operator, mutable=ast.Sub):
    _fields=()
    def __init__(self):
        pass


class slice(AST, mutable=ast.slice):
    _fields=()
    def __init__(self):
        pass


class ExtSlice(slice, mutable=ast.ExtSlice):
    _fields=('dims',)
    def __init__(self, dims):
        self.dims = dims


class Index(slice, mutable=ast.Index):
    _fields=('value',)
    def __init__(self, value):
        self.value = value


class Slice(slice, mutable=ast.Slice):
    _fields=('lower', 'upper', 'step')
    def __init__(self, lower, upper, step):
        self.lower = lower
        self.upper = upper
        self.step = step


class stmt(AST, mutable=ast.stmt):
    _fields=()
    def __init__(self):
        pass


class AnnAssign(stmt, mutable=ast.AnnAssign):
    _fields=('target', 'annotation', 'value', 'simple')
    def __init__(self, target, annotation, value, simple):
        self.target = target
        self.annotation = annotation
        self.value = value
        self.simple = simple


class Assert(stmt, mutable=ast.Assert):
    _fields=('test', 'msg')
    def __init__(self, test, msg):
        self.test = test
        self.msg = msg


class Assign(stmt, mutable=ast.Assign):
    _fields=('targets', 'value')
    def __init__(self, targets, value):
        self.targets = targets
        self.value = value


class AsyncFor(stmt, mutable=ast.AsyncFor):
    _fields=('target', 'iter', 'body', 'orelse')
    def __init__(self, target, iter, body, orelse):
        self.target = target
        self.iter = iter
        self.body = body
        self.orelse = orelse


class AsyncFunctionDef(stmt, mutable=ast.AsyncFunctionDef):
    _fields=('name', 'args', 'body', 'decorator_list', 'returns')
    def __init__(self, name, args, body, decorator_list, returns):
        self.name = name
        self.args = args
        self.body = body
        self.decorator_list = decorator_list
        self.returns = returns


class AsyncWith(stmt, mutable=ast.AsyncWith):
    _fields=('items', 'body')
    def __init__(self, items, body):
        self.items = items
        self.body = body


class AugAssign(stmt, mutable=ast.AugAssign):
    _fields=('target', 'op', 'value')
    def __init__(self, target, op, value):
        self.target = target
        self.op = op
        self.value = value


class Break(stmt, mutable=ast.Break):
    _fields=()
    def __init__(self):
        pass


class ClassDef(stmt, mutable=ast.ClassDef):
    _fields=('name', 'bases', 'keywords', 'body', 'decorator_list')
    def __init__(self, name, bases, keywords, body, decorator_list):
        self.name = name
        self.bases = bases
        self.keywords = keywords
        self.body = body
        self.decorator_list = decorator_list


class Continue(stmt, mutable=ast.Continue):
    _fields=()
    def __init__(self):
        pass


class Delete(stmt, mutable=ast.Delete):
    _fields=('targets',)
    def __init__(self, targets):
        self.targets = targets


class Expr(stmt, mutable=ast.Expr):
    _fields=('value',)
    def __init__(self, value):
        self.value = value


class For(stmt, mutable=ast.For):
    _fields=('target', 'iter', 'body', 'orelse')
    def __init__(self, target, iter, body, orelse):
        self.target = target
        self.iter = iter
        self.body = body
        self.orelse = orelse


class FunctionDef(stmt, mutable=ast.FunctionDef):
    _fields=('name', 'args', 'body', 'decorator_list', 'returns')
    def __init__(self, name, args, body, decorator_list, returns):
        self.name = name
        self.args = args
        self.body = body
        self.decorator_list = decorator_list
        self.returns = returns


class Global(stmt, mutable=ast.Global):
    _fields=('names',)
    def __init__(self, names):
        self.names = names


class If(stmt, mutable=ast.If):
    _fields=('test', 'body', 'orelse')
    def __init__(self, test, body, orelse):
        self.test = test
        self.body = body
        self.orelse = orelse


class Import(stmt, mutable=ast.Import):
    _fields=('names',)
    def __init__(self, names):
        self.names = names


class ImportFrom(stmt, mutable=ast.ImportFrom):
    _fields=('module', 'names', 'level')
    def __init__(self, module, names, level):
        self.module = module
        self.names = names
        self.level = level


class Nonlocal(stmt, mutable=ast.Nonlocal):
    _fields=('names',)
    def __init__(self, names):
        self.names = names


class Pass(stmt, mutable=ast.Pass):
    _fields=()
    def __init__(self):
        pass


class Raise(stmt, mutable=ast.Raise):
    _fields=('exc', 'cause')
    def __init__(self, exc, cause):
        self.exc = exc
        self.cause = cause


class Return(stmt, mutable=ast.Return):
    _fields=('value',)
    def __init__(self, value):
        self.value = value


class Try(stmt, mutable=ast.Try):
    _fields=('body', 'handlers', 'orelse', 'finalbody')
    def __init__(self, body, handlers, orelse, finalbody):
        self.body = body
        self.handlers = handlers
        self.orelse = orelse
        self.finalbody = finalbody


class While(stmt, mutable=ast.While):
    _fields=('test', 'body', 'orelse')
    def __init__(self, test, body, orelse):
        self.test = test
        self.body = body
        self.orelse = orelse


class With(stmt, mutable=ast.With):
    _fields=('items', 'body')
    def __init__(self, items, body):
        self.items = items
        self.body = body


class unaryop(AST, mutable=ast.unaryop):
    _fields=()
    def __init__(self):
        pass


class Invert(unaryop, mutable=ast.Invert):
    _fields=()
    def __init__(self):
        pass


class Not(unaryop, mutable=ast.Not):
    _fields=()
    def __init__(self):
        pass


class UAdd(unaryop, mutable=ast.UAdd):
    _fields=()
    def __init__(self):
        pass


class USub(unaryop, mutable=ast.USub):
    _fields=()
    def __init__(self):
        pass


class withitem(AST, mutable=ast.withitem):
    _fields=('context_expr', 'optional_vars')
    def __init__(self, context_expr, optional_vars):
        self.context_expr = context_expr
        self.optional_vars = optional_vars


