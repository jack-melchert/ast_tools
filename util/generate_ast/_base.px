class AST(mutable=ast.AST, metaclass=ImmutableMeta):
    def replace(self, **kwargs):
        args = dict(iter_fields(self))
        args.update(kwargs)
        return type(self)(**args)

    def __setattr__(self, attr, value):
        if attr in self._fields and hasattr(self, attr):
            raise AttributeError('Cannot modify ImmutableAST fields')
        elif isinstance(value, (list, ast.AST)):
            value = immutable(value)

        self.__dict__[attr] = value

    def __delattr__(self, attr):
        if attr in self._fields:
            raise AttributeError('Cannot modify ImmutableAST fields')
        del self.__dict__[attr]

    def __hash__(self):
        try:
            return self._hash_
        except AttributeError:
            pass

        h = hash(type(self))
        for _, n in iter_fields(self):
            if isinstance(n, AST):
                h += hash(n)
            elif isinstance(n, tp.Sequence):
                for c in n:
                    h += hash(c)
            else:
                h += hash(n)
        self._hash_ = h
        return h

    def __eq__(self, other):
        if not isinstance(other, AST):
            return NotImplemented
        elif isinstance(other, type(self)):
            for f in self._fields:
                if getattr(self, f) != getattr(other, f):
                    return False
            return True
        else:
            return False

    def __ne__(self, other):
        return not (self == other)
